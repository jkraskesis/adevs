/*
 * Copyright (c) 2013, James Nutaro
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the FreeBSD Project.
 *
 * Bugs, comments, and questions can be sent to nutaro@gmail.com
 */

#ifndef _adevs_simpledigraph_h_
#define _adevs_simpledigraph_h_

#include <cstdlib>
#include <list>
#include <map>
#include <memory>
#include <set>

#include "adevs/adevs.h"

using namespace std;


namespace adevs {

/*
 * This is a very simple digraph model for connecting single input/single
 * output systems. Output generated by a component model is sent to all
 * components connected to it.
 */
template <class OutputType, class TimeType = double>
class SimpleDigraph : public Network<OutputType, TimeType> {
  public:
    /// A component of the SimpleDigraph model
    using Component = Devs<OutputType, TimeType>;

    /// Construct a network without components.
    SimpleDigraph() : Network<OutputType, TimeType>() {}

    /// Add a model to the network.
    void add(shared_ptr<Component> model);

    /// Couple the source model to the destination model.
    void couple(shared_ptr<Component> src, shared_ptr<Component> dst);
    // Special functions needed for v3.4 since the model API switched to smart
    // pointers instead of raw pointers. This is likely to disappear in v4.0 when
    // the network models are rewritten to only convey model structure and not
    // have any routing functionality.
    void couple_input(shared_ptr<Component> dst);
    void couple_output(shared_ptr<Component> src);

    // /// Puts the network's set of components into c
    // void getComponents(set<shared_ptr<Component>> &c);

    /// Puts the network's set of components into c
    void getComponents(set<Component*> &c);

    /// Route an event according to the network's couplings
    void route(OutputType const &x, Component* model,
               list<Event<OutputType, TimeType>> &r);

  private:
    set<shared_ptr<Component>> models;

    // Coupling information
    std::map<Component*, list<shared_ptr<Component>>> graph;
};

template <class OutputType, class TimeType>
void SimpleDigraph<OutputType, TimeType>::add(shared_ptr<Component> model) {
    assert(model.get() != this);
    models.insert(model);
    model->setParent(this);
    if (this->simulator != nullptr) {
        this->simulator->pending_schedule.insert(model);
    }
}

template <class OutputType, class TimeType>
void SimpleDigraph<OutputType, TimeType>::couple(shared_ptr<Component> src,
                                                 shared_ptr<Component> dst) {
    if (src.get() != this) {
        add(src);
    }
    if (dst.get() != this) {
        add(dst);
    }
    graph[src.get()].push_back(dst);
}

template <class OutputType, class TimeType>
void SimpleDigraph<OutputType, TimeType>::couple_input(
    shared_ptr<Component> dst) {
    add(dst);
    graph[this].push_back(dst);
}

template <class OutputType, class TimeType>
void SimpleDigraph<OutputType, TimeType>::couple_output(
    shared_ptr<Component> src) {
    add(src);
    graph[src].push_back(this);
}


template <class OutputType, class TimeType>
void SimpleDigraph<OutputType, TimeType>::getComponents(set<Component*> &c) {
    for (auto ii : models) {
        c.insert(ii.get());
    }
}

// template <class OutputType, class TimeType>
// void SimpleDigraph<OutputType, TimeType>::getComponents(
//     set<shared_ptr<Component>> &c) {}


template <class OutputType, class TimeType>
void SimpleDigraph<OutputType, TimeType>::route(
    OutputType const &x, Component* model,
    list<Event<OutputType, TimeType>> &r) {

    // Find the list of target models and ports
    typename std::map<Component*, list<shared_ptr<Component>>>::iterator
        graph_iter;
    graph_iter = graph.find(model);
    // If no target, just return
    if (graph_iter == graph.end()) {
        return;
    }
    // Otherwise, add the targets to the event list
    Event<OutputType, TimeType> event;
    for (auto node_iter : (*graph_iter).second) {
        event.model = node_iter.get();
        event.value = x;
        r.push_back(event);
    }
}

}  // namespace adevs

#endif
